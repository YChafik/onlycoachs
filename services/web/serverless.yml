---
# org: chafikyassine
app: onlycoachs
service: onlycoachs-web
frameworkVersion: "3"
useDotenv: true
disabledDeprecations:
  - CLI_OPTIONS_SCHEMA # some Serverless plugins haven't been updated yet and generate warnings

provider:
  name: aws
  runtime: nodejs18.x
  region: ${aws:region, 'eu-west-3'}
  stage: ${env:stage, 'dev'}
  memorySize: 512
  timeout: 6
  logRetentionInDays: 7

plugins:
  - serverless-s3-sync

custom:
  nsDomain: ${env:ONLYCOACHS_WEB_NS_DOMAIN, 'web.onlycoachs.fr'}
  domainPrefixes:
    develop: "dev."
    staging: "staging."
    production: ""
  siteDomainName: ${self:custom.domainPrefixes.${env:stage}}${self:custom.nsDomain}
  bucketName: "site-assets-${self:custom.domainPrefixes.${env:stage}}${self:custom.nsDomain}"
  acmCertificateArn: ${env:ONLYCOACHS_ACM_CERTIFICATE_ARN, ""}
  publicHostedZone: ${env:ONLYCOACHS_HOSTED_ZONE_ID, ""}
  cloudFrontHostedZoneId: Z04085592EIR8R8HBR49J
  s3Sync:
    - bucketName: ${self:custom.bucketName}
      localDir: build
      params: # optional
        - index.html:
            CacheControl: "no-cache,max-age=0,must-revalidate"
        - meta.json:
            CacheControl: "no-cache,max-age=0,must-revalidate"

resources:
  Resources:
    siteBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html

    siteBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: siteBucket
        PolicyDocument:
          Statement:
            - Action:
                - "s3:GetObject"
              Effect: "Allow"
              Principal: "*"
              Resource: "arn:aws:s3:::${self:custom.bucketName}/*"
    webUrl:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /${sls:stage}/CONNECTEED_INOPS/webUrl
        Type: String
        Value: https://${self:custom.siteDomainName}
    siteDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName:
                Fn::GetAtt:
                  - siteBucket
                  - DomainName
              Id: ${self:custom.bucketName}-origin
              S3OriginConfig:
                OriginAccessIdentity: ""
          Enabled: true
          DefaultRootObject: index.html
          HttpVersion: http2
          # SecurityPolicy: "TLS_1_2"
          Aliases:
            - ${self:custom.siteDomainName}
          DefaultCacheBehavior:
            DefaultTTL: 30
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            TargetOriginId: ${self:custom.bucketName}-origin
            ForwardedValues:
              QueryString: "false"
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:
            AcmCertificateArn: ${self:custom.acmCertificateArn}
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2021
          CustomErrorResponses:
            - ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /

    webRecordSets:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneId: ${self:custom.publicHostedZone}
        RecordSets:
          - Name: ${self:custom.siteDomainName}
            Type: A
            AliasTarget:
              DNSName: { Fn::GetAtt: [siteDistribution, DomainName] }
              HostedZoneId: ${self:custom.cloudFrontHostedZoneId}
  Outputs:
    WebAppUrl:
      Value: ${self:custom.nsDomain}
